console.log('üöÄ ShebaXpert Dashboard Script Loaded - Version 2025-06-02');

// Initialize the map with default zoom controls and no attribution control
var map = L.map('mapid', {
    center: [23.8103, 90.4125], 
    zoom: 15,  
    maxZoom: 21,
    minZoom: 5,
    zoomControl: true,  // Enable default zoom controls
    attributionControl: false  // Remove attribution control (white button)
});

// Add OpenStreetMap tiles without attribution
L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    maxZoom: 22  
}).addTo(map);

// Enhanced service providers with more realistic data
const serviceProviders = [
    // Electricians
    { name: "‡¶∞‡¶π‡¶ø‡¶Æ ‡¶á‡¶≤‡ßá‡¶ï‡¶ü‡ßç‡¶∞‡¶ø‡¶ï ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏", lat: 23.8113, lng: 90.4125, category: "electrician", icon: "bolt", rating: 4.8, experience: "‡ß´ ‡¶¨‡¶õ‡¶∞", phone: "01712345678" },
    { name: "‡¶ï‡¶∞‡¶ø‡¶Æ ‡¶á‡¶≤‡ßá‡¶ï‡¶ü‡ßç‡¶∞‡¶ø‡¶∂‡¶ø‡¶Ø‡¶º‡¶æ‡¶®", lat: 23.7956, lng: 90.4074, category: "electrician", icon: "bolt", rating: 4.6, experience: "‡ßÆ ‡¶¨‡¶õ‡¶∞", phone: "01812345679" },
    { name: "‡¶¨‡¶ø‡¶¶‡ßç‡¶Ø‡ßÅ‡ßé ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏ ‡¶∏‡ßá‡¶®‡ßç‡¶ü‡¶æ‡¶∞", lat: 23.8208, lng: 90.4193, category: "electrician", icon: "bolt", rating: 4.9, experience: "‡ßß‡ß¶ ‡¶¨‡¶õ‡¶∞", phone: "01912345680" },
    
    // Plumbers
    { name: "‡¶Ü‡¶≤‡ßÄ ‡¶™‡ßç‡¶≤‡¶æ‡¶Æ‡ßç‡¶¨‡¶ø‡¶Ç ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏", lat: 23.8093, lng: 90.4135, category: "plumber", icon: "faucet", rating: 4.7, experience: "‡ß¨ ‡¶¨‡¶õ‡¶∞", phone: "01712345681" },
    { name: "‡¶π‡¶æ‡¶∏‡¶æ‡¶® ‡¶ì‡¶Ø‡¶º‡¶æ‡¶ü‡¶æ‡¶∞ ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï‡¶∏", lat: 23.7889, lng: 90.4017, category: "plumber", icon: "faucet", rating: 4.5, experience: "‡ß≠ ‡¶¨‡¶õ‡¶∞", phone: "01812345682" },
    { name: "‡¶¢‡¶æ‡¶ï‡¶æ ‡¶™‡ßç‡¶≤‡¶æ‡¶Æ‡ßç‡¶¨‡¶ø‡¶Ç", lat: 23.8156, lng: 90.4284, category: "plumber", icon: "faucet", rating: 4.8, experience: "‡ßß‡ß® ‡¶¨‡¶õ‡¶∞", phone: "01912345683" },
    
    // AC Services
    { name: "‡¶ï‡ßÅ‡¶≤ ‡¶è‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏", lat: 23.8103, lng: 90.4115, category: "ac", icon: "wind", rating: 4.9, experience: "‡ßØ ‡¶¨‡¶õ‡¶∞", phone: "01712345684" },
    { name: "‡¶¢‡¶æ‡¶ï‡¶æ ‡¶è‡¶∏‡¶ø ‡¶∞‡¶ø‡¶™‡ßá‡¶Ø‡¶º‡¶æ‡¶∞", lat: 23.7845, lng: 90.4098, category: "ac", icon: "wind", rating: 4.6, experience: "‡ß´ ‡¶¨‡¶õ‡¶∞", phone: "01812345685" },
    { name: "‡¶è‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ï‡¶®‡ßç‡¶°‡¶ø‡¶∂‡¶® ‡¶è‡¶ï‡ßç‡¶∏‡¶™‡¶æ‡¶∞‡ßç‡¶ü", lat: 23.8234, lng: 90.4167, category: "ac", icon: "wind", rating: 4.8, experience: "‡ßß‡ßß ‡¶¨‡¶õ‡¶∞", phone: "01912345686" },
    
    // Carpenters
    { name: "‡¶ï‡¶æ‡¶†‡¶Æ‡¶ø‡¶∏‡ßç‡¶§‡ßç‡¶∞‡¶ø ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏", lat: 23.8123, lng: 90.4145, category: "carpenter", icon: "hammer", rating: 4.7, experience: "‡ßÆ ‡¶¨‡¶õ‡¶∞", phone: "01712345687" },
    { name: "‡¶´‡¶æ‡¶∞‡ßç‡¶®‡¶ø‡¶ö‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶ï‡¶æ‡¶∞", lat: 23.7923, lng: 90.4056, category: "carpenter", icon: "hammer", rating: 4.5, experience: "‡ß¨ ‡¶¨‡¶õ‡¶∞", phone: "01812345688" },
    { name: "‡¶â‡¶° ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï ‡¶è‡¶ï‡ßç‡¶∏‡¶™‡¶æ‡¶∞‡ßç‡¶ü", lat: 23.8189, lng: 90.4223, category: "carpenter", icon: "hammer", rating: 4.9, experience: "‡ßß‡ß´ ‡¶¨‡¶õ‡¶∞", phone: "01912345689" },
    
    // Painting Services
    { name: "‡¶∞‡¶ô ‡¶Æ‡¶ø‡¶∏‡ßç‡¶§‡ßç‡¶∞‡¶ø ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏", lat: 23.8083, lng: 90.4155, category: "painting", icon: "paint-roller", rating: 4.6, experience: "‡ß≠ ‡¶¨‡¶õ‡¶∞", phone: "01712345690" },
    { name: "‡¶ì‡¶Ø‡¶º‡¶æ‡¶≤ ‡¶™‡ßá‡¶á‡¶®‡ßç‡¶ü‡¶ø‡¶Ç", lat: 23.7867, lng: 90.4089, category: "painting", icon: "paint-roller", rating: 4.8, experience: "‡ßØ ‡¶¨‡¶õ‡¶∞", phone: "01812345691" },
    { name: "‡¶π‡ßã‡¶Æ ‡¶°‡ßá‡¶ï‡ßã‡¶∞‡ßá‡¶ü‡¶∞", lat: 23.8167, lng: 90.4201, category: "painting", icon: "paint-roller", rating: 4.7, experience: "‡ßß‡ß¶ ‡¶¨‡¶õ‡¶∞", phone: "01912345692" },
    
    // General Repair
    { name: "‡¶π‡ßã‡¶Æ ‡¶∞‡¶ø‡¶™‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏", lat: 23.8133, lng: 90.4105, category: "repair", icon: "tools", rating: 4.8, experience: "‡ßß‡ß® ‡¶¨‡¶õ‡¶∞", phone: "01712345693" },
    { name: "‡¶ò‡¶∞ ‡¶Æ‡ßá‡¶∞‡¶æ‡¶Æ‡¶§ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏", lat: 23.7934, lng: 90.4078, category: "repair", icon: "tools", rating: 4.5, experience: "‡ß¨ ‡¶¨‡¶õ‡¶∞", phone: "01812345694" },
    { name: "‡¶Æ‡ßá‡¶á‡¶®‡¶ü‡ßá‡¶á‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶∏ ‡¶è‡¶ï‡ßç‡¶∏‡¶™‡¶æ‡¶∞‡ßç‡¶ü", lat: 23.8201, lng: 90.4178, category: "repair", icon: "tools", rating: 4.9, experience: "‡ßß‡ß™ ‡¶¨‡¶õ‡¶∞", phone: "01912345695" }
];

// Create custom icons
function createCustomIcon(iconName) {
    return L.divIcon({
        html: `<div class="custom-marker"><i class="fas fa-${iconName}"></i></div>`,
        iconSize: [40, 40],
        className: 'custom-marker-container'
    });
}

// Global variables
let userLocation = [23.8103, 90.4125]; // Default: Dhaka center
let userMarker = null;
let serviceMarkers = [];
let currentCategory = 'electrician'; // Default

// Helper: get providers by category, near user
function getNearbyProviders(category, center, radiusKm = 3) {
    // For demo, just filter by category and randomize near user
    return serviceProviders.filter(p => p.category === category).map(p => {
        // Randomize location within radius
        const angle = Math.random() * 2 * Math.PI;
        const dist = Math.random() * radiusKm / 111; // ~1 deg = 111km
        return {
            ...p,
            lat: center[0] + Math.cos(angle) * dist,
            lng: center[1] + Math.sin(angle) * dist
        };
    });
}


function clearServiceMarkers() {
    serviceMarkers.forEach(m => map.removeLayer(m));
    serviceMarkers = [];
}

function showServiceMarkers(category) {
    clearServiceMarkers();
    const providers = getNearbyProviders(category, userLocation);
    providers.forEach(provider => {
        const marker = L.marker([provider.lat, provider.lng], {
            icon: createCustomIcon(provider.icon)
        }).addTo(map)
            .bindPopup(`
                <div class="service-popup">
                    <h3>${provider.name}</h3>
                    <div class="popup-info">
                        <div class="rating">
                            <i class="fas fa-star"></i>
                            <span>${provider.rating}</span>
                        </div>
                        <div class="experience">
                            <i class="fas fa-calendar-alt"></i>
                            <span>${provider.experience} ‡¶Ö‡¶≠‡¶ø‡¶ú‡ßç‡¶û‡¶§‡¶æ</span>
                        </div>
                        <div class="phone">
                            <i class="fas fa-phone"></i>
                            <span>${provider.phone}</span>
                        </div>
                    </div>
                    <button class="contact-btn" onclick="contactProvider('${provider.phone}')">
                        <i class="fas fa-phone-alt"></i> ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
                    </button>
                </div>
            `);
        serviceMarkers.push(marker);
    });
}

// Basic user location setter
function setUserLocation(lat, lng) {
    userLocation = [lat, lng];
    map.setView(userLocation, 16);
    if (userMarker) {
        map.removeLayer(userMarker);
    }
    userMarker = L.marker(userLocation, {
        icon: createCustomIcon('map-marker-alt')
    }).addTo(map).bindPopup('‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶®').openPopup();
}

// Enhanced user location setter with pulsing animation
function setUserLocationWithPulse(lat, lng) {
    userLocation = [lat, lng];
    map.setView(userLocation, 16);
    
    if (userMarker) {
        map.removeLayer(userMarker);
    }
    
    // Create pulsing user marker
    userMarker = L.marker(userLocation, {
        icon: L.divIcon({
            html: `<div class="user-location-marker">
                     <div class="pulse"></div>
                     <div class="user-dot"></div>
                   </div>`,
            iconSize: [20, 20],
            className: 'user-location-container'
        })
    }).addTo(map).bindPopup('‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶®').openPopup();
}

// Toast notification for location feedback
function showLocationToast(message, type) {
    const toast = document.createElement('div');
    toast.className = `location-toast ${type}`;
    toast.innerHTML = `
        <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'}"></i>
        <span>${message}</span>
    `;
    
    document.body.appendChild(toast);
    
    // Show toast
    setTimeout(() => {
        toast.classList.add('show');
    }, 100);
    
    // Hide toast after 3 seconds
    setTimeout(() => {
        toast.classList.remove('show');
        setTimeout(() => {
            document.body.removeChild(toast);
        }, 300);
    }, 3000);
}

// Contact provider function
function contactProvider(phone) {
    if (confirm(`${phone} ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡ßá ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶®?`)) {
        window.open(`tel:${phone}`, '_self');
    }
}

// Initialize location button functionality
function initializeLocationButton() {
    console.log('üéØ Initializing location button...');
    const locationBtn = document.getElementById('show-my-location');
    console.log('üìç Location button found:', locationBtn);
    
    if (locationBtn) {
        console.log('‚úÖ Adding click listener to location button');
        // Add a visual indicator that the button is ready
        locationBtn.style.border = '2px solid #00C6FF';
        locationBtn.style.boxShadow = '0 0 10px rgba(0, 198, 255, 0.3)';
        
        locationBtn.addEventListener('click', function() {
            console.log('Location button clicked!');
            // Add loading state
            locationBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i><span>‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶® ‡¶ñ‡ßã‡¶Å‡¶ú‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...</span>';
            locationBtn.disabled = true;
              
            if (navigator.geolocation) {
                console.log('Geolocation supported, getting position...');
                navigator.geolocation.getCurrentPosition(
                    function(position) {
                        console.log('Position received:', position);
                        const lat = position.coords.latitude;
                        const lng = position.coords.longitude;
                        console.log('Lat:', lat, 'Lng:', lng);
                          
                        // Set user location with pulsing marker
                        setUserLocationWithPulse(lat, lng);
                        showServiceMarkers(currentCategory);
                        
                        // Reset button
                        locationBtn.innerHTML = '<i class="fas fa-location-arrow"></i><span>‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶®</span>';
                        locationBtn.disabled = false;
                        
                        // Show success message
                        showLocationToast('‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶® ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá!', 'success');
                    },
                    function(error) {
                        console.log('Geolocation error:', error);
                        let errorMessage = '‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶® ‡¶™‡ßá‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§';
                        
                        switch(error.code) {
                            case error.PERMISSION_DENIED:
                                errorMessage = '‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶®‡ßá‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶¶‡¶ø‡¶®‡•§';
                                break;
                            case error.POSITION_UNAVAILABLE:
                                errorMessage = '‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶® ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá ‡¶®‡¶æ‡•§';
                                break;
                            case error.TIMEOUT:
                                errorMessage = '‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶∂‡ßá‡¶∑‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§';
                                break;
                        }
                        
                        // Reset button
                        locationBtn.innerHTML = '<i class="fas fa-location-arrow"></i><span>‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶®</span>';
                        locationBtn.disabled = false;
                        
                        showLocationToast(errorMessage, 'error');
                    },
                    {
                        enableHighAccuracy: true,
                        timeout: 10000,
                        maximumAge: 60000
                    }
                );
            } else {
                locationBtn.innerHTML = '<i class="fas fa-location-arrow"></i><span>‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶®</span>';
                locationBtn.disabled = false;
                showLocationToast('‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßç‡¶∞‡¶æ‡¶â‡¶ú‡¶æ‡¶∞ geolocation ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡ßá ‡¶®‡¶æ‡•§', 'error');
            }
        });
    }
}

// Category selection functionality
function initializeCategorySelection() {
    console.log('Initializing category selection...');
    const categoryItems = document.querySelectorAll('.category-item');
    
    categoryItems.forEach(item => {
        item.addEventListener('click', function() {
            // Remove active class from all items
            categoryItems.forEach(cat => cat.classList.remove('active'));
            // Add active class to clicked item
            this.classList.add('active');
            
            // Update current category and show markers
            const categoryText = this.querySelector('span').textContent;
            console.log('Category selected:', categoryText);
            
            // Map Bengali category names to internal categories
            const categoryMap = {
                '‡¶á‡¶≤‡ßá‡¶ï‡¶ü‡ßç‡¶∞‡¶ø‡¶∂‡¶ø‡¶Ø‡¶º‡¶æ‡¶®': 'electrician',
                '‡¶™‡ßç‡¶≤‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞': 'plumber',
                '‡¶è‡¶∏‡¶ø ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏': 'ac',
                '‡¶ó‡ßÉ‡¶π‡¶∏‡ßç‡¶•‡¶æ‡¶≤‡¶ø ‡¶Æ‡ßá‡¶∞‡¶æ‡¶Æ‡¶§': 'repair',
                '‡¶™‡ßá‡¶á‡¶®‡ßç‡¶ü‡¶ø‡¶Ç': 'painting',
                '‡¶ï‡¶æ‡¶∞‡ßç‡¶™‡ßá‡¶®‡ßç‡¶ü‡¶æ‡¶∞': 'carpenter'
            };
            
            currentCategory = categoryMap[categoryText] || 'electrician';
            showServiceMarkers(currentCategory);
        });
    });
}

// Search location functionality
function initializeSearch() {
    const searchBtn = document.querySelector('.search-button');
    if (searchBtn) {
        searchBtn.addEventListener('click', async () => {
            const placeInput = document.querySelector('.input-field');
            let placeName = placeInput.value.trim();
            if (placeName === "") {
                alert("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡ßç‡¶•‡¶æ‡¶® ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®!");
                return;
            }
            let url = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(placeName)}&countrycodes=bd`;
            try {
                let response = await fetch(url);
                let data = await response.json();
                if (data.length > 0) {
                    let lat = parseFloat(data[0].lat);
                    let lon = parseFloat(data[0].lon);
                    setUserLocation(lat, lon);
                    showServiceMarkers(currentCategory);
                } else {
                    alert("‡¶ï‡ßã‡¶®‡ßã ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø!");
                }
            } catch (error) {
                console.error("Error fetching location:", error);
                alert("‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá!");
            }
        });
    }
}

// Profile dropdown functionality
function initializeProfileDropdown() {
    const profileBtn = document.querySelector('.profile-btn');
    const dropdown = document.querySelector('.dropdown-content');
    if (!profileBtn || !dropdown) return;
    
    let timeoutId;
    
    // Click handler
    profileBtn.addEventListener('click', function(e) {
        e.stopPropagation();
        toggleDropdown();
    });
    
    // Hover handlers with delay
    profileBtn.addEventListener('mouseenter', function() {
        clearTimeout(timeoutId);
        dropdown.style.display = 'block';
        setTimeout(() => {
            dropdown.style.opacity = '1';
            dropdown.style.transform = 'translateY(0)';
        }, 10);
    });
    
    profileBtn.addEventListener('mouseleave', function() {
        startHideTimer();
    });
    
    dropdown.addEventListener('mouseenter', function() {
        clearTimeout(timeoutId);
    });
    
    dropdown.addEventListener('mouseleave', function() {
        startHideTimer();
    });
    
    function startHideTimer() {
        timeoutId = setTimeout(() => {
            dropdown.style.opacity = '0';
            dropdown.style.transform = 'translateY(-10px)';
            setTimeout(() => {
                if (dropdown.style.opacity === '0') {
                    dropdown.style.display = 'none';
                }
            }, 300);
        }, 300);
    }
    
    function toggleDropdown() {
        const isVisible = dropdown.style.display === 'block' && 
                          dropdown.style.opacity === '1';
        
        if (isVisible) {
            dropdown.style.opacity = '0';
            dropdown.style.transform = 'translateY(-10px)';
            setTimeout(() => {
                dropdown.style.display = 'none';
            }, 300);
        } else {
            dropdown.style.display = 'block';
            setTimeout(() => {
                dropdown.style.opacity = '1';
                dropdown.style.transform = 'translateY(0)';
            }, 10);
        }
    }
    
    // Close when clicking outside
    document.addEventListener('click', function(e) {
        if (!dropdown.contains(e.target) && e.target !== profileBtn) {
            dropdown.style.opacity = '0';
            dropdown.style.transform = 'translateY(-10px)';
            setTimeout(() => {
                dropdown.style.display = 'none';
            }, 300);
        }
    });
}

// Authentication functions (merged from auth.js)
function checkAuthentication() {
    const token = localStorage.getItem('authToken');
    const user = localStorage.getItem('user');
    if (!token || !user) {
        // For demo purposes, we'll allow access without authentication
        // Uncomment the line below to enable authentication
        // window.location.href = '../Login/LogIn.html';
        console.log('No authentication found, allowing demo access');
        return;
    }
    // Optional: Verify token with backend
    // verifyToken(token); // Uncomment if backend is ready
}

// Optionally verify token with backend (disabled by default)
async function verifyToken(token) {
    try {
        const response = await fetch('http://localhost:5000/api/auth/me', {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });
        if (!response.ok) {
            localStorage.removeItem('authToken');
            localStorage.removeItem('user');
            window.location.href = '../Login/LogIn.html';
        }
    } catch (error) {
        console.error('Token verification failed:', error);
        // Network error: keep user logged in for now
    }
}

function loadUserInfo() {
    const user = localStorage.getItem('user');
    if (user) {
        const userData = JSON.parse(user);
        const userName = document.querySelector('.user-name');
        const userEmail = document.querySelector('.user-email');
        if (userName) userName.textContent = `${userData.firstName} ${userData.lastName}`;
        if (userEmail) userEmail.textContent = userData.email;
    } else {
        // Set default demo user info
        const userName = document.querySelector('.user-name');
        const userEmail = document.querySelector('.user-email');
        if (userName) userName.textContent = 'Demo User';
        if (userEmail) userEmail.textContent = 'demo@shebaexpert.com';
    }
}

function setupLogout() {
    // Find the logout button by Bengali text
    const logoutBtn = Array.from(document.querySelectorAll('.dropdown-item')).find(
        btn => btn.textContent.includes('‡¶≤‡¶ó‡¶Ü‡¶â‡¶ü')
    );
    if (logoutBtn) {
        logoutBtn.addEventListener('click', function(e) {
            e.preventDefault();
            logout();
        });
    }
}

function logout() {
    localStorage.removeItem('authToken');
    localStorage.removeItem('user');
    window.location.href = '../Landing Page/LandingPage.html';
}

// Support System Implementation
console.log('üéØ Initializing Support System...');

// Support System State
let supportSystemInitialized = false;
let chatMessages = [];
let supportAnalytics = {
    modalOpened: 0,
    emergencyCalls: 0,
    chatMessages: 0,
    faqViews: 0
};

// Initialize Support System
function initializeSupportSystem() {
    if (supportSystemInitialized) return;
    
    console.log('üìã Setting up support system events...');
    
    // Support Modal Controls
    const helpBtn = document.getElementById('help-btn');
    const supportModal = document.getElementById('support-modal');
    const closeSupportModal = document.getElementById('close-support-modal');
    
    // Help button click handler
    if (helpBtn) {
        helpBtn.addEventListener('click', (e) => {
            e.preventDefault();
            showSupportModal();
        });
    }
    
    // Close modal handlers
    if (closeSupportModal) {
        closeSupportModal.addEventListener('click', hideSupportModal);
    }
    
    if (supportModal) {
        supportModal.addEventListener('click', (e) => {
            if (e.target === supportModal) {
                hideSupportModal();
            }
        });
    }
    
    // Quick Support Options
    setupQuickSupportOptions();
    
    // FAQ System
    setupFAQSystem();
    
    // Report System
    setupReportSystem();
    
    // Chat Widget
    setupChatWidget();
    
    // Keyboard Shortcuts
    setupKeyboardShortcuts();
    
    // Create floating support button
    createFloatingSupportButton();
    
    // Load analytics from storage
    loadSupportAnalytics();
    
    supportSystemInitialized = true;
    console.log('‚úÖ Support system initialized successfully');
}

// Show Support Modal
function showSupportModal() {
    const modal = document.getElementById('support-modal');
    if (modal) {
        modal.classList.add('show');
        document.body.style.overflow = 'hidden';
        trackSupportUsage('modal_opened');
        
        // Show notification
        showNotification('‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶§‡¶æ ‡¶ï‡ßá‡¶®‡ßç‡¶¶‡ßç‡¶∞ ‡¶ñ‡ßã‡¶≤‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá', 'success');
    }
}

// Hide Support Modal
function hideSupportModal() {
    const modal = document.getElementById('support-modal');
    if (modal) {
        modal.classList.remove('show');
        document.body.style.overflow = '';
        
        // Also hide chat widget if open
        hideChatWidget();
    }
}

// Enhanced Emergency Call with Location
function makeEmergencyCall(number) {
    trackSupportUsage('emergency_call');
    
    // Get user location if available
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
            (position) => {
                const lat = position.coords.latitude;
                const lng = position.coords.longitude;
                
                // Create emergency call with location
                makeEmergencyCallWithLocation(number, lat, lng);
            },
            () => {
                // Fallback to simple call
                makeSimpleEmergencyCall(number);
            }
        );
    } else {
        makeSimpleEmergencyCall(number);
    }
}

// Emergency call with location data
function makeEmergencyCallWithLocation(number, lat, lng) {
    const locationText = `‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶®: ${lat.toFixed(6)}, ${lng.toFixed(6)}`;
    
    // Try to make the call
    const callUrl = `tel:${number}`;
    window.open(callUrl, '_self');
    
    // Show location info
    showNotification(`‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø ‡¶ï‡¶≤: ${number}\n${locationText}`, 'info', 5000);
    
    // Copy location to clipboard for manual sharing
    if (navigator.clipboard) {
        navigator.clipboard.writeText(`‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶§‡¶æ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡•§ ${locationText} Google Maps: https://maps.google.com/?q=${lat},${lng}`);
        console.log('üìã Location copied to clipboard for emergency services');
    }
}

// Simple emergency call without location
function makeSimpleEmergencyCall(number) {
    const callUrl = `tel:${number}`;
    window.open(callUrl, '_self');
    showNotification(`‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá: ${number}`, 'info');
}

// Setup Quick Support Options
function setupQuickSupportOptions() {
    // Talk with Agent
    const talkWithAgent = document.getElementById('talk-with-agent');
    if (talkWithAgent) {
        talkWithAgent.addEventListener('click', () => {
            showChatWidget();
            hideSupportModal();
        });
    }
    
    // Call Support
    const callSupport = document.getElementById('call-support');
    if (callSupport) {
        callSupport.addEventListener('click', () => {
            window.open('tel:+8801700000000', '_self');
            showNotification('‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ï‡¶≤‡ßá ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...', 'info');
        });
    }
    
    // WhatsApp Support
    const whatsappSupport = document.getElementById('whatsapp-support');
    if (whatsappSupport) {
        whatsappSupport.addEventListener('click', () => {
            const message = encodeURIComponent('‡¶Ü‡¶∏‡ßç‡¶∏‡¶æ‡¶≤‡¶æ‡¶Æ‡ßÅ ‡¶Ü‡¶≤‡¶æ‡¶á‡¶ï‡ßÅ‡¶Æ! ‡¶Ü‡¶Æ‡¶æ‡¶∞ ShebaXpert ‡¶∏‡ßá‡¶¨‡¶æ ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡•§');
            const whatsappUrl = `https://wa.me/8801700000000?text=${message}`;
            window.open(whatsappUrl, '_blank');
            showNotification('‡¶π‡ßã‡¶Ø‡¶º‡¶æ‡¶ü‡¶∏‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßá ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...', 'success');
        });
    }
    
    // Email Support
    const emailSupport = document.getElementById('email-support');
    if (emailSupport) {
        emailSupport.addEventListener('click', () => {
            const subject = encodeURIComponent('ShebaXpert ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶§‡¶æ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®');
            const body = encodeURIComponent(`‡¶Ü‡¶∏‡ßç‡¶∏‡¶æ‡¶≤‡¶æ‡¶Æ‡ßÅ ‡¶Ü‡¶≤‡¶æ‡¶á‡¶ï‡ßÅ‡¶Æ,

‡¶Ü‡¶Æ‡¶æ‡¶∞ ShebaXpert ‡¶°‡ßç‡¶Ø‡¶æ‡¶∂‡¶¨‡ßã‡¶∞‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶§‡¶æ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡•§

‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:
[‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®]

‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶`);
            const emailUrl = `mailto:support@shebaexpert.com?subject=${subject}&body=${body}`;
            window.open(emailUrl, '_self');
            showNotification('‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶ï‡ßç‡¶≤‡¶æ‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü ‡¶ñ‡ßã‡¶≤‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...', 'info');
        });
    }
}

// Setup FAQ System
function setupFAQSystem() {
    const faqQuestions = document.querySelectorAll('.faq-question');
    
    faqQuestions.forEach(question => {
        question.addEventListener('click', () => {
            const faqItem = question.closest('.faq-item');
            const isActive = faqItem.classList.contains('active');
            
            // Close all FAQ items
            document.querySelectorAll('.faq-item').forEach(item => {
                item.classList.remove('active');
            });
            
            // Toggle current item
            if (!isActive) {
                faqItem.classList.add('active');
                trackSupportUsage('faq_viewed');
            }
        });
    });
}

// Setup Report System
function setupReportSystem() {
    const reportButtons = document.querySelectorAll('.report-btn');
    
    reportButtons.forEach(button => {
        button.addEventListener('click', () => {
            const reportType = button.classList[1]; // service-issue, payment-issue, etc.
            handleReportIssue(reportType);
        });
    });
}

// Handle Report Issue
function handleReportIssue(type) {
    const reportMessages = {
        'service-issue': '‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶Ö‡¶≠‡¶ø‡¶Ø‡ßã‡¶ó',
        'payment-issue': '‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶Ö‡¶≠‡¶ø‡¶Ø‡ßã‡¶ó',
        'provider-issue': '‡¶∏‡ßá‡¶¨‡¶æ ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶®‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶¨‡¶ø‡¶∞‡ßÅ‡¶¶‡ßç‡¶ß‡ßá ‡¶Ö‡¶≠‡¶ø‡¶Ø‡ßã‡¶ó',
        'app-issue': '‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü'
    };
    
    const subject = encodeURIComponent(reportMessages[type] || '‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶Ö‡¶≠‡¶ø‡¶Ø‡ßã‡¶ó');
    const body = encodeURIComponent(`‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º: ${reportMessages[type]}

‡¶Ö‡¶≠‡¶ø‡¶Ø‡ßã‡¶ó‡ßá‡¶∞ ‡¶¨‡¶ø‡¶¨‡¶∞‡¶£:
[‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶≠‡¶ø‡¶Ø‡ßã‡¶ó‡ßá‡¶∞ ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®]

‡¶ò‡¶ü‡¶®‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º: ${new Date().toLocaleString('bn-BD')}
‡¶¨‡ßç‡¶∞‡¶æ‡¶â‡¶ú‡¶æ‡¶∞: ${navigator.userAgent}`);
    
    const emailUrl = `mailto:complaints@shebaexpert.com?subject=${subject}&body=${body}`;
    window.open(emailUrl, '_self');
    
    showNotification('‡¶Ö‡¶≠‡¶ø‡¶Ø‡ßã‡¶ó ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá', 'info');
}

// Setup Chat Widget
function setupChatWidget() {
    const closeChatBtn = document.getElementById('close-chat');
    const chatInput = document.getElementById('chat-input');
    const sendBtn = document.getElementById('send-message');
    
    if (closeChatBtn) {
        closeChatBtn.addEventListener('click', hideChatWidget);
    }
    
    if (chatInput) {
        chatInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                sendChatMessage();
            }
        });
    }
    
    if (sendBtn) {
        sendBtn.addEventListener('click', sendChatMessage);
    }
}

// Show Chat Widget
function showChatWidget() {
    const chatWidget = document.getElementById('chat-widget');
    if (chatWidget) {
        chatWidget.classList.add('show');
        
        // Focus on input
        setTimeout(() => {
            const chatInput = document.getElementById('chat-input');
            if (chatInput) chatInput.focus();
        }, 300);
        
        showNotification('‡¶è‡¶ú‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá', 'success');
    }
}

// Hide Chat Widget
function hideChatWidget() {
    const chatWidget = document.getElementById('chat-widget');
    if (chatWidget) {
        chatWidget.classList.remove('show');
    }
}

// Send Chat Message
function sendChatMessage() {
    const chatInput = document.getElementById('chat-input');
    const chatMessages = document.getElementById('chat-messages');
    
    if (!chatInput || !chatMessages) return;
    
    const message = chatInput.value.trim();
    if (!message) return;
    
    // Add user message
    const userMessageDiv = createMessageElement(message, 'user');
    chatMessages.appendChild(userMessageDiv);
    
    // Clear input
    chatInput.value = '';
    
    // Scroll to bottom
    chatMessages.scrollTop = chatMessages.scrollHeight;
    
    // Track usage
    trackSupportUsage('chat_message');
    
    // Simulate agent response
    setTimeout(() => {
        const response = getAgentResponse(message);
        const agentMessageDiv = createMessageElement(response, 'agent');
        chatMessages.appendChild(agentMessageDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }, 1000 + Math.random() * 2000); // Random delay 1-3 seconds
}

// Create Message Element
function createMessageElement(text, sender) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${sender}-message`;
    
    const contentDiv = document.createElement('div');
    contentDiv.className = 'message-content';
    contentDiv.textContent = text;
    
    const timeDiv = document.createElement('div');
    timeDiv.className = 'message-time';
    timeDiv.textContent = new Date().toLocaleTimeString('bn-BD', {
        hour: '2-digit',
        minute: '2-digit'
    });
    
    messageDiv.appendChild(contentDiv);
    messageDiv.appendChild(timeDiv);
    
    return messageDiv;
}

// Get Agent Response (Simulated)
function getAgentResponse(userMessage) {
    const responses = {
        '‡¶∏‡ßá‡¶¨‡¶æ': '‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶ï‡¶≤ ‡¶ß‡¶∞‡¶®‡ßá‡¶∞ ‡¶∏‡ßá‡¶¨‡¶æ ‡ß®‡ß™/‡ß≠ ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß‡•§ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡ßã‡¶® ‡¶ß‡¶∞‡¶®‡ßá‡¶∞ ‡¶∏‡ßá‡¶¨‡¶æ ‡¶®‡¶ø‡¶§‡ßá ‡¶ö‡¶æ‡¶®?',
        '‡¶¶‡¶æ‡¶Æ': '‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡ßá‡¶¨‡¶æ‡¶∞ ‡¶¶‡¶æ‡¶Æ ‡¶è‡¶≤‡¶æ‡¶ï‡¶æ ‡¶ì ‡¶∏‡ßá‡¶¨‡¶æ‡¶∞ ‡¶ß‡¶∞‡¶® ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ ‡¶≠‡¶ø‡¶®‡ßç‡¶® ‡¶π‡¶Ø‡¶º‡•§ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶∏‡ßá‡¶¨‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®‡•§',
        '‡¶∏‡¶Æ‡¶Ø‡¶º': '‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§ ‡ßß-‡ß® ‡¶ò‡¶®‡ßç‡¶ü‡¶æ‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶∏‡ßá‡¶¨‡¶æ ‡¶™‡ßå‡¶Å‡¶õ‡ßá ‡¶¶‡ßá‡¶á‡•§ ‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø ‡¶∏‡ßá‡¶¨‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡ß©‡ß¶ ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá‡•§',
        '‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü': '‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶¨‡¶ø‡¶ï‡¶æ‡¶∂, ‡¶®‡¶ó‡¶¶, ‡¶∞‡¶ï‡ßá‡¶ü ‡¶è‡¶¨‡¶Ç ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∂ ‡¶Ö‡¶® ‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø ‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶ï‡¶∞‡¶ø‡•§',
        '‡¶è‡¶≤‡¶æ‡¶ï‡¶æ': '‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶¢‡¶æ‡¶ï‡¶æ‡¶∞ ‡¶∏‡¶ï‡¶≤ ‡¶è‡¶≤‡¶æ‡¶ï‡¶æ‡¶Ø‡¶º ‡¶∏‡ßá‡¶¨‡¶æ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶•‡¶æ‡¶ï‡¶ø‡•§ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶è‡¶≤‡¶æ‡¶ï‡¶æ‡¶Ø‡¶º ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß‡¶§‡¶æ ‡¶ú‡¶æ‡¶®‡¶§‡ßá ‡¶≤‡ßã‡¶ï‡ßá‡¶∂‡¶® ‡¶∂‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§',
        '‡¶ó‡ßÅ‡¶£‡¶ó‡¶§': '‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶ï‡¶≤ ‡¶∏‡ßá‡¶¨‡¶æ ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶®‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á‡¶ï‡ßÉ‡¶§ ‡¶ì ‡¶Ö‡¶≠‡¶ø‡¶ú‡ßç‡¶û‡•§ ‡ßß‡ß¶‡ß¶% ‡¶ó‡ßÅ‡¶£‡¶ó‡¶§ ‡¶∏‡ßá‡¶¨‡¶æ‡¶∞ ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶Ø‡¶º‡¶§‡¶æ ‡¶¶‡¶ø‡¶á‡•§'
    };
    
    // Find matching response
    for (let keyword in responses) {
        if (userMessage.includes(keyword)) {
            return responses[keyword];
        }
    }
    
    // Default responses
    const defaultResponses = [
        '‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§ ‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡¶õ‡¶ø‡•§',
        '‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡¶ü‡¶ø ‡¶Ü‡¶∞‡¶ì ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶¨‡¶≤‡ßÅ‡¶®‡•§ ‡¶Ü‡¶Æ‡¶ø ‡¶∏‡¶†‡¶ø‡¶ï ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶® ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡¶¨‡•§',
        '‡¶è‡¶á ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑‡¶ú‡ßç‡¶û ‡¶ü‡¶ø‡¶Æ ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶¨‡ßá‡•§ ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§',
        '‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶∂‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§ ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶§‡¶æ‡¶°‡¶º‡¶æ‡¶§‡¶æ‡¶°‡¶º‡¶ø ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶¨‡•§'
    ];
    
    return defaultResponses[Math.floor(Math.random() * defaultResponses.length)];
}

// Setup Keyboard Shortcuts
function setupKeyboardShortcuts() {
    document.addEventListener('keydown', (e) => {
        // Ctrl + H = Open Help
        if (e.ctrlKey && e.key === 'h') {
            e.preventDefault();
            showSupportModal();
        }
        
        // Ctrl + E = Quick Emergency
        if (e.ctrlKey && e.key === 'e') {
            e.preventDefault();
            makeEmergencyCall('999');
        }
        
        // ESC = Close all support windows
        if (e.key === 'Escape') {
            hideSupportModal();
            hideChatWidget();
        }
    });
}

// Create Floating Support Button
function createFloatingSupportButton() {
    const floatingBtn = document.createElement('button');
    floatingBtn.id = 'floating-support';
    floatingBtn.innerHTML = '<i class="fas fa-headset"></i>';
    floatingBtn.title = '‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶§‡¶æ (Ctrl+H)';
    floatingBtn.style.cssText = `
        position: fixed;
        bottom: 20px;
        left: 20px;
        width: 60px;
        height: 60px;
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        border: none;
        border-radius: 50%;
        color: white;
        font-size: 1.5rem;
        cursor: pointer;
        z-index: 1000;
        box-shadow: 0 4px 12px rgba(0, 74, 173, 0.3);
        transition: all 0.3s ease;
        animation: pulse 2s infinite;
    `;
    
    // Add pulse animation
    const style = document.createElement('style');
    style.textContent = `
        @keyframes pulse {
            0% { box-shadow: 0 4px 12px rgba(0, 74, 173, 0.3); }
            50% { box-shadow: 0 4px 20px rgba(0, 74, 173, 0.5); }
            100% { box-shadow: 0 4px 12px rgba(0, 74, 173, 0.3); }
        }
    `;
    document.head.appendChild(style);
    
    floatingBtn.addEventListener('click', showSupportModal);
    
    floatingBtn.addEventListener('mouseenter', () => {
        floatingBtn.style.transform = 'scale(1.1)';
    });
    
    floatingBtn.addEventListener('mouseleave', () => {
        floatingBtn.style.transform = 'scale(1)';
    });
    
    document.body.appendChild(floatingBtn);
}

// Support Analytics Functions
function trackSupportUsage(action) {
    supportAnalytics[action] = (supportAnalytics[action] || 0) + 1;
    saveSupportAnalytics();
    console.log(`üìä Support Analytics: ${action} = ${supportAnalytics[action]}`);
}

function saveSupportAnalytics() {
    try {
        localStorage.setItem('shebaexpert_support_analytics', JSON.stringify(supportAnalytics));
    } catch (e) {
        console.log('Unable to save support analytics');
    }
}

function loadSupportAnalytics() {
    try {
        const saved = localStorage.getItem('shebaexpert_support_analytics');
        if (saved) {
            supportAnalytics = { ...supportAnalytics, ...JSON.parse(saved) };
        }
    } catch (e) {
        console.log('Unable to load support analytics');
    }
}

// Enhanced Notification System for Support
function showNotification(message, type = 'info', duration = 3000) {
    // Remove existing notifications
    const existing = document.querySelector('.support-notification');
    if (existing) {
        existing.remove();
    }
    
    const notification = document.createElement('div');
    notification.className = `support-notification ${type}`;
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${type === 'success' ? '#10B981' : type === 'error' ? '#EF4444' : '#3B82F6'};
        color: white;
        padding: 1rem 1.5rem;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        z-index: 3000;
        font-size: 0.9rem;
        max-width: 300px;
        word-wrap: break-word;
        animation: slideInRight 0.3s ease;
    `;
    
    // Add slide animation
    const style = document.createElement('style');
    style.textContent = `
        @keyframes slideInRight {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
    `;
    document.head.appendChild(style);
    
    notification.textContent = message;
    document.body.appendChild(notification);
    
    // Auto remove
    setTimeout(() => {
        if (notification.parentNode) {
            notification.style.animation = 'slideOutRight 0.3s ease';
            setTimeout(() => notification.remove(), 300);
        }
    }, duration);
}

// Initialize everything when DOM is ready
function initializeAll() {
    console.log('üöÄ Initializing all functionality...');
    checkAuthentication();
    loadUserInfo();
    setupLogout();
    initializeLocationButton();
    initializeCategorySelection();
    initializeSearch();
    initializeProfileDropdown();
    initializeSupportSystem();
    initializeFAQ();
initializeSupportOptions();
initializeChatWidget();
initializeReportButtons();
initializeEmergencyButtons();
initializeProviderModal();
    // Add support system initialization
    console.log('‚úÖ All initialization complete - Dashboard ready!');
}

// Add floating support button for quick access
function addFloatingSupportButton() {
    // Check if already exists
    if (document.getElementById('floating-support-btn')) return;
    
    const floatingBtn = document.createElement('button');
    floatingBtn.id = 'floating-support-btn';
    floatingBtn.className = 'floating-support-btn';
    floatingBtn.innerHTML = '<i class="fas fa-headset"></i>';
    floatingBtn.title = '‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶§‡¶æ (Ctrl+H)';
    
    floatingBtn.addEventListener('click', showSupportModal);
    
    document.body.appendChild(floatingBtn);
}

// Add notification system for support
function showSupportNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `support-notification ${type}`;
    notification.innerHTML = `
        <div class="notification-content">
            <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'}"></i>
            <span>${message}</span>
        </div>
        <button class="close-notification" onclick="this.parentElement.remove()">
            <i class="fas fa-times"></i>
        </button>
    `;
    
    document.body.appendChild(notification);
    
    // Auto remove after 5 seconds
    setTimeout(() => {
        if (notification.parentElement) {
            notification.remove();
        }
    }, 5000);
}

// Enhanced emergency call with location sharing
function makeEmergencyCallWithLocation(number) {
    const confirmation = confirm(`${number} ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡ßá ‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶®?\n\n‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶® ‡¶§‡¶•‡ßç‡¶Ø ‡¶∂‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá‡•§`);
    
    if (confirmation) {
        // Try to get current location
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
                function(position) {
                    const lat = position.coords.latitude;
                    const lng = position.coords.longitude;
                    
                    // Store location for emergency services
                    localStorage.setItem('emergency_location', JSON.stringify({
                        lat: lat,
                        lng: lng,
                        timestamp: new Date().toISOString()
                    }));
                    
                    // Make the call
                    window.open(`tel:${number}`, '_self');
                    
                    // Show notification with location info
                    showSupportNotification(
                        `‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá ${number} ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡ßá‡•§ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶®: ${lat.toFixed(4)}, ${lng.toFixed(4)}`,
                        'success'
                    );
                },
                function(error) {
                    // Still make the call even if location fails
                    window.open(`tel:${number}`, '_self');
                    showSupportNotification(`${number} ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡ßá ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...`, 'success');
                }
            );
        } else {
            // Geolocation not supported, just make the call
            window.open(`tel:${number}`, '_self');
            showSupportNotification(`${number} ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡ßá ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...`, 'success');
        }
    }
}

// Support system analytics
function trackSupportUsage(action, details = {}) {
    const supportAnalytics = JSON.parse(localStorage.getItem('support_analytics') || '[]');
    
    supportAnalytics.push({
        action: action,
        details: details,
        timestamp: new Date().toISOString(),
        userAgent: navigator.userAgent,
        url: window.location.href
    });
    
    // Keep only last 100 entries
    if (supportAnalytics.length > 100) {
        supportAnalytics.splice(0, supportAnalytics.length - 100);
    }
    
    localStorage.setItem('support_analytics', JSON.stringify(supportAnalytics));
}

// Enhanced support system initialization
function initializeSupportSystem() {
    console.log('üÜò Initializing enhanced support system...');
    
    // Add floating support button
    addFloatingSupportButton();
    
    // Help button click handler
    const helpBtn = document.getElementById('help-btn');
    const supportModal = document.getElementById('support-modal');
    const closeSupportModal = document.getElementById('close-support-modal');
    
    if (helpBtn && supportModal) {
        helpBtn.addEventListener('click', function(e) {
            e.preventDefault();
            showSupportModal();
            trackSupportUsage('modal_opened', { source: 'navbar' });
        });
    }
    
    if (closeSupportModal) {
        closeSupportModal.addEventListener('click', hideSupportModal);
    }
    
    // Close modal when clicking outside
    if (supportModal) {
        supportModal.addEventListener('click', function(e) {
            if (e.target === supportModal) {
                hideSupportModal();
            }
        });
    }
    
    // Initialize all components
    initializeFAQ();
    initializeSupportOptions();
    initializeChatWidget();
    initializeReportButtons();
    initializeEmergencyButtons();
    
    // Show welcome message if first visit
    if (!localStorage.getItem('support_tour_shown')) {
        setTimeout(() => {
            showSupportNotification(
                '‡¶®‡¶§‡ßÅ‡¶® ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶§‡¶æ ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ! ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶â‡¶™‡¶∞‡ßá‡¶∞ "‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶§‡¶æ" ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶¨‡¶æ Ctrl+H ‡¶ö‡¶æ‡¶™‡ßÅ‡¶®‡•§',
                'info'
            );
            localStorage.setItem('support_tour_shown', 'true');
        }, 2000);
    }
    
    console.log('‚úÖ Enhanced support system initialized');
}

// Initialize emergency buttons with enhanced functionality
function initializeEmergencyButtons() {
    const emergencyButtons = document.querySelectorAll('.emergency-btn');
    
    emergencyButtons.forEach(button => {
        const originalOnclick = button.getAttribute('onclick');
        if (originalOnclick) {
            // Extract phone number from onclick
            const phoneMatch = originalOnclick.match(/'([^']+)'/);
            if (phoneMatch) {
                const phoneNumber = phoneMatch[1];
                
                // Replace with enhanced function
                button.removeAttribute('onclick');
                button.addEventListener('click', function() {
                    makeEmergencyCallWithLocation(phoneNumber);
                    trackSupportUsage('emergency_call', { number: phoneNumber });
                });
            }
        }
    });
}

// Add emergency quick access (Ctrl/Cmd + E)
document.addEventListener('keydown', function(e) {
    if ((e.ctrlKey || e.metaKey) && e.key === 'e') {
        e.preventDefault();
        if (confirm('‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶§‡¶æ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®? 999 ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡ßá ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶®?')) {
            makeEmergencyCall('999');
        }
    }
});

// Add custom marker styles to the page
const style = document.createElement('style');
style.textContent = `
.custom-marker-container {
    display: flex;
    justify-content: center;
    align-items: center;
}

.custom-marker {
    background: linear-gradient(135deg, #004AAD, #00C6FF);
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    color: white;
    font-size: 18px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    transform: translate(-50%, -50%);
}

.user-location-container {
    background: transparent !important;
    border: none !important;
}

.user-location-marker {
    position: relative;
    width: 20px;
    height: 20px;
    display: flex;
    justify-content: center;
    align-items: center;
}

.pulse {
    position: absolute;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background: rgba(0, 204, 255, 0.5);
    animation: pulse-animation 2s infinite;
}

.user-dot {
    position: absolute;
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background: #00C6FF;
    box-shadow: 0 0 0 rgba(0, 198, 255, 0.7), 0 0 10px rgba(0, 198, 255, 0.7);
}

@keyframes pulse-animation {
    0% {
        transform: scale(1);
        opacity: 1;
    }
    50% {
        transform: scale(1.2);
        opacity: 0.7;
    }
    100% {
        transform: scale(1);
        opacity: 1;
    }
}
`;

// Append styles to head
document.head.appendChild(style);

// Robust initialization
function safeInit() {
    initializeAll();
}
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', safeInit);
} else {
    safeInit();
}
window.addEventListener('load', safeInit);

// Always use pulsing marker for user location
if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(function(pos) {
        setUserLocationWithPulse(pos.coords.latitude, pos.coords.longitude);
        showServiceMarkers(currentCategory);
    }, function() {
        setUserLocationWithPulse(userLocation[0], userLocation[1]);
        showServiceMarkers(currentCategory);
    });
} else {
    setUserLocationWithPulse(userLocation[0], userLocation[1]);
    showServiceMarkers(currentCategory);
}
function initializeProviderModal() {
    console.log('üë• Initializing provider modal...');

    const providerBtn = document.getElementById('provider-btn');
    const providerModal = document.getElementById('provider-modal');
    const closeProviderModal = document.getElementById('close-provider-modal');

    if (providerBtn && providerModal) {
        providerBtn.addEventListener('click', function (e) {
            e.preventDefault();
            providerModal.style.display = 'block';
        });
    }

    if (closeProviderModal) {
        closeProviderModal.addEventListener('click', function () {
            providerModal.style.display = 'none';
        });
    }

    // Close if click outside
    if (providerModal) {
        providerModal.addEventListener('click', function (e) {
            if (e.target === providerModal) {
                providerModal.style.display = 'none';
            }
        });
    }

    console.log('‚úÖ Provider modal initialized');
}